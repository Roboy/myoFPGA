// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: myoFPGA.proto

#ifndef PROTOBUF_myoFPGA_2eproto__INCLUDED
#define PROTOBUF_myoFPGA_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace MyoFPGAProtobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_myoFPGA_2eproto();
void protobuf_AssignDesc_myoFPGA_2eproto();
void protobuf_ShutdownFile_myoFPGA_2eproto();

class MotorConfig;
class MotorStatus;
class MotorCommand;

// ===================================================================

class MotorConfig : public ::google::protobuf::Message {
 public:
  MotorConfig();
  virtual ~MotorConfig();

  MotorConfig(const MotorConfig& from);

  inline MotorConfig& operator=(const MotorConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MotorConfig& default_instance();

  void Swap(MotorConfig* other);

  // implements Message ----------------------------------------------

  MotorConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MotorConfig& from);
  void MergeFrom(const MotorConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes control_mode = 1;
  inline int control_mode_size() const;
  inline void clear_control_mode();
  static const int kControlModeFieldNumber = 1;
  inline const ::std::string& control_mode(int index) const;
  inline ::std::string* mutable_control_mode(int index);
  inline void set_control_mode(int index, const ::std::string& value);
  inline void set_control_mode(int index, const char* value);
  inline void set_control_mode(int index, const void* value, size_t size);
  inline ::std::string* add_control_mode();
  inline void add_control_mode(const ::std::string& value);
  inline void add_control_mode(const char* value);
  inline void add_control_mode(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& control_mode() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_control_mode();

  // repeated int32 outputPosMax = 2;
  inline int outputposmax_size() const;
  inline void clear_outputposmax();
  static const int kOutputPosMaxFieldNumber = 2;
  inline ::google::protobuf::int32 outputposmax(int index) const;
  inline void set_outputposmax(int index, ::google::protobuf::int32 value);
  inline void add_outputposmax(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      outputposmax() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_outputposmax();

  // repeated int32 outputNegMax = 3;
  inline int outputnegmax_size() const;
  inline void clear_outputnegmax();
  static const int kOutputNegMaxFieldNumber = 3;
  inline ::google::protobuf::int32 outputnegmax(int index) const;
  inline void set_outputnegmax(int index, ::google::protobuf::int32 value);
  inline void add_outputnegmax(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      outputnegmax() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_outputnegmax();

  // repeated int32 spPosMax = 4;
  inline int spposmax_size() const;
  inline void clear_spposmax();
  static const int kSpPosMaxFieldNumber = 4;
  inline ::google::protobuf::int32 spposmax(int index) const;
  inline void set_spposmax(int index, ::google::protobuf::int32 value);
  inline void add_spposmax(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      spposmax() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_spposmax();

  // repeated int32 spNegMax = 5;
  inline int spnegmax_size() const;
  inline void clear_spnegmax();
  static const int kSpNegMaxFieldNumber = 5;
  inline ::google::protobuf::int32 spnegmax(int index) const;
  inline void set_spnegmax(int index, ::google::protobuf::int32 value);
  inline void add_spnegmax(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      spnegmax() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_spnegmax();

  // repeated uint32 Kp = 6;
  inline int kp_size() const;
  inline void clear_kp();
  static const int kKpFieldNumber = 6;
  inline ::google::protobuf::uint32 kp(int index) const;
  inline void set_kp(int index, ::google::protobuf::uint32 value);
  inline void add_kp(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      kp() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_kp();

  // repeated uint32 Ki = 7;
  inline int ki_size() const;
  inline void clear_ki();
  static const int kKiFieldNumber = 7;
  inline ::google::protobuf::uint32 ki(int index) const;
  inline void set_ki(int index, ::google::protobuf::uint32 value);
  inline void add_ki(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ki() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ki();

  // repeated uint32 Kd = 8;
  inline int kd_size() const;
  inline void clear_kd();
  static const int kKdFieldNumber = 8;
  inline ::google::protobuf::uint32 kd(int index) const;
  inline void set_kd(int index, ::google::protobuf::uint32 value);
  inline void add_kd(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      kd() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_kd();

  // repeated uint32 forwardGain = 9;
  inline int forwardgain_size() const;
  inline void clear_forwardgain();
  static const int kForwardGainFieldNumber = 9;
  inline ::google::protobuf::uint32 forwardgain(int index) const;
  inline void set_forwardgain(int index, ::google::protobuf::uint32 value);
  inline void add_forwardgain(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      forwardgain() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_forwardgain();

  // repeated uint32 deadBand = 10;
  inline int deadband_size() const;
  inline void clear_deadband();
  static const int kDeadBandFieldNumber = 10;
  inline ::google::protobuf::uint32 deadband(int index) const;
  inline void set_deadband(int index, ::google::protobuf::uint32 value);
  inline void add_deadband(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      deadband() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_deadband();

  // repeated int32 IntegralPosMax = 11;
  inline int integralposmax_size() const;
  inline void clear_integralposmax();
  static const int kIntegralPosMaxFieldNumber = 11;
  inline ::google::protobuf::int32 integralposmax(int index) const;
  inline void set_integralposmax(int index, ::google::protobuf::int32 value);
  inline void add_integralposmax(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      integralposmax() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_integralposmax();

  // repeated int32 IntegralNegMax = 12;
  inline int integralnegmax_size() const;
  inline void clear_integralnegmax();
  static const int kIntegralNegMaxFieldNumber = 12;
  inline ::google::protobuf::int32 integralnegmax(int index) const;
  inline void set_integralnegmax(int index, ::google::protobuf::int32 value);
  inline void add_integralnegmax(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      integralnegmax() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_integralnegmax();

  // @@protoc_insertion_point(class_scope:MyoFPGAProtobuf.MotorConfig)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> control_mode_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > outputposmax_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > outputnegmax_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > spposmax_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > spnegmax_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > kp_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ki_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > kd_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > forwardgain_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > deadband_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > integralposmax_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > integralnegmax_;
  friend void  protobuf_AddDesc_myoFPGA_2eproto();
  friend void protobuf_AssignDesc_myoFPGA_2eproto();
  friend void protobuf_ShutdownFile_myoFPGA_2eproto();

  void InitAsDefaultInstance();
  static MotorConfig* default_instance_;
};
// -------------------------------------------------------------------

class MotorStatus : public ::google::protobuf::Message {
 public:
  MotorStatus();
  virtual ~MotorStatus();

  MotorStatus(const MotorStatus& from);

  inline MotorStatus& operator=(const MotorStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MotorStatus& default_instance();

  void Swap(MotorStatus* other);

  // implements Message ----------------------------------------------

  MotorStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MotorStatus& from);
  void MergeFrom(const MotorStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 pwmRef = 1;
  inline int pwmref_size() const;
  inline void clear_pwmref();
  static const int kPwmRefFieldNumber = 1;
  inline ::google::protobuf::int32 pwmref(int index) const;
  inline void set_pwmref(int index, ::google::protobuf::int32 value);
  inline void add_pwmref(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pwmref() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pwmref();

  // repeated int32 position = 2;
  inline int position_size() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline ::google::protobuf::int32 position(int index) const;
  inline void set_position(int index, ::google::protobuf::int32 value);
  inline void add_position(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      position() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_position();

  // repeated int32 velocity = 3;
  inline int velocity_size() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 3;
  inline ::google::protobuf::int32 velocity(int index) const;
  inline void set_velocity(int index, ::google::protobuf::int32 value);
  inline void add_velocity(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      velocity() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_velocity();

  // repeated int32 displacement = 4;
  inline int displacement_size() const;
  inline void clear_displacement();
  static const int kDisplacementFieldNumber = 4;
  inline ::google::protobuf::int32 displacement(int index) const;
  inline void set_displacement(int index, ::google::protobuf::int32 value);
  inline void add_displacement(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      displacement() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_displacement();

  // repeated int32 current = 5;
  inline int current_size() const;
  inline void clear_current();
  static const int kCurrentFieldNumber = 5;
  inline ::google::protobuf::int32 current(int index) const;
  inline void set_current(int index, ::google::protobuf::int32 value);
  inline void add_current(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      current() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_current();

  // repeated int32 sensor = 6;
  inline int sensor_size() const;
  inline void clear_sensor();
  static const int kSensorFieldNumber = 6;
  inline ::google::protobuf::int32 sensor(int index) const;
  inline void set_sensor(int index, ::google::protobuf::int32 value);
  inline void add_sensor(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      sensor() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_sensor();

  // @@protoc_insertion_point(class_scope:MyoFPGAProtobuf.MotorStatus)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pwmref_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > position_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > velocity_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > displacement_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > current_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > sensor_;
  friend void  protobuf_AddDesc_myoFPGA_2eproto();
  friend void protobuf_AssignDesc_myoFPGA_2eproto();
  friend void protobuf_ShutdownFile_myoFPGA_2eproto();

  void InitAsDefaultInstance();
  static MotorStatus* default_instance_;
};
// -------------------------------------------------------------------

class MotorCommand : public ::google::protobuf::Message {
 public:
  MotorCommand();
  virtual ~MotorCommand();

  MotorCommand(const MotorCommand& from);

  inline MotorCommand& operator=(const MotorCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MotorCommand& default_instance();

  void Swap(MotorCommand* other);

  // implements Message ----------------------------------------------

  MotorCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MotorCommand& from);
  void MergeFrom(const MotorCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 motor = 1;
  inline int motor_size() const;
  inline void clear_motor();
  static const int kMotorFieldNumber = 1;
  inline ::google::protobuf::uint32 motor(int index) const;
  inline void set_motor(int index, ::google::protobuf::uint32 value);
  inline void add_motor(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      motor() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_motor();

  // repeated int32 setPoint = 2;
  inline int setpoint_size() const;
  inline void clear_setpoint();
  static const int kSetPointFieldNumber = 2;
  inline ::google::protobuf::int32 setpoint(int index) const;
  inline void set_setpoint(int index, ::google::protobuf::int32 value);
  inline void add_setpoint(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      setpoint() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_setpoint();

  // @@protoc_insertion_point(class_scope:MyoFPGAProtobuf.MotorCommand)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > motor_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > setpoint_;
  friend void  protobuf_AddDesc_myoFPGA_2eproto();
  friend void protobuf_AssignDesc_myoFPGA_2eproto();
  friend void protobuf_ShutdownFile_myoFPGA_2eproto();

  void InitAsDefaultInstance();
  static MotorCommand* default_instance_;
};
// ===================================================================


// ===================================================================

// MotorConfig

// repeated bytes control_mode = 1;
inline int MotorConfig::control_mode_size() const {
  return control_mode_.size();
}
inline void MotorConfig::clear_control_mode() {
  control_mode_.Clear();
}
inline const ::std::string& MotorConfig::control_mode(int index) const {
  // @@protoc_insertion_point(field_get:MyoFPGAProtobuf.MotorConfig.control_mode)
  return control_mode_.Get(index);
}
inline ::std::string* MotorConfig::mutable_control_mode(int index) {
  // @@protoc_insertion_point(field_mutable:MyoFPGAProtobuf.MotorConfig.control_mode)
  return control_mode_.Mutable(index);
}
inline void MotorConfig::set_control_mode(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MyoFPGAProtobuf.MotorConfig.control_mode)
  control_mode_.Mutable(index)->assign(value);
}
inline void MotorConfig::set_control_mode(int index, const char* value) {
  control_mode_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MyoFPGAProtobuf.MotorConfig.control_mode)
}
inline void MotorConfig::set_control_mode(int index, const void* value, size_t size) {
  control_mode_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MyoFPGAProtobuf.MotorConfig.control_mode)
}
inline ::std::string* MotorConfig::add_control_mode() {
  return control_mode_.Add();
}
inline void MotorConfig::add_control_mode(const ::std::string& value) {
  control_mode_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MyoFPGAProtobuf.MotorConfig.control_mode)
}
inline void MotorConfig::add_control_mode(const char* value) {
  control_mode_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MyoFPGAProtobuf.MotorConfig.control_mode)
}
inline void MotorConfig::add_control_mode(const void* value, size_t size) {
  control_mode_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MyoFPGAProtobuf.MotorConfig.control_mode)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MotorConfig::control_mode() const {
  // @@protoc_insertion_point(field_list:MyoFPGAProtobuf.MotorConfig.control_mode)
  return control_mode_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MotorConfig::mutable_control_mode() {
  // @@protoc_insertion_point(field_mutable_list:MyoFPGAProtobuf.MotorConfig.control_mode)
  return &control_mode_;
}

// repeated int32 outputPosMax = 2;
inline int MotorConfig::outputposmax_size() const {
  return outputposmax_.size();
}
inline void MotorConfig::clear_outputposmax() {
  outputposmax_.Clear();
}
inline ::google::protobuf::int32 MotorConfig::outputposmax(int index) const {
  // @@protoc_insertion_point(field_get:MyoFPGAProtobuf.MotorConfig.outputPosMax)
  return outputposmax_.Get(index);
}
inline void MotorConfig::set_outputposmax(int index, ::google::protobuf::int32 value) {
  outputposmax_.Set(index, value);
  // @@protoc_insertion_point(field_set:MyoFPGAProtobuf.MotorConfig.outputPosMax)
}
inline void MotorConfig::add_outputposmax(::google::protobuf::int32 value) {
  outputposmax_.Add(value);
  // @@protoc_insertion_point(field_add:MyoFPGAProtobuf.MotorConfig.outputPosMax)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MotorConfig::outputposmax() const {
  // @@protoc_insertion_point(field_list:MyoFPGAProtobuf.MotorConfig.outputPosMax)
  return outputposmax_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MotorConfig::mutable_outputposmax() {
  // @@protoc_insertion_point(field_mutable_list:MyoFPGAProtobuf.MotorConfig.outputPosMax)
  return &outputposmax_;
}

// repeated int32 outputNegMax = 3;
inline int MotorConfig::outputnegmax_size() const {
  return outputnegmax_.size();
}
inline void MotorConfig::clear_outputnegmax() {
  outputnegmax_.Clear();
}
inline ::google::protobuf::int32 MotorConfig::outputnegmax(int index) const {
  // @@protoc_insertion_point(field_get:MyoFPGAProtobuf.MotorConfig.outputNegMax)
  return outputnegmax_.Get(index);
}
inline void MotorConfig::set_outputnegmax(int index, ::google::protobuf::int32 value) {
  outputnegmax_.Set(index, value);
  // @@protoc_insertion_point(field_set:MyoFPGAProtobuf.MotorConfig.outputNegMax)
}
inline void MotorConfig::add_outputnegmax(::google::protobuf::int32 value) {
  outputnegmax_.Add(value);
  // @@protoc_insertion_point(field_add:MyoFPGAProtobuf.MotorConfig.outputNegMax)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MotorConfig::outputnegmax() const {
  // @@protoc_insertion_point(field_list:MyoFPGAProtobuf.MotorConfig.outputNegMax)
  return outputnegmax_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MotorConfig::mutable_outputnegmax() {
  // @@protoc_insertion_point(field_mutable_list:MyoFPGAProtobuf.MotorConfig.outputNegMax)
  return &outputnegmax_;
}

// repeated int32 spPosMax = 4;
inline int MotorConfig::spposmax_size() const {
  return spposmax_.size();
}
inline void MotorConfig::clear_spposmax() {
  spposmax_.Clear();
}
inline ::google::protobuf::int32 MotorConfig::spposmax(int index) const {
  // @@protoc_insertion_point(field_get:MyoFPGAProtobuf.MotorConfig.spPosMax)
  return spposmax_.Get(index);
}
inline void MotorConfig::set_spposmax(int index, ::google::protobuf::int32 value) {
  spposmax_.Set(index, value);
  // @@protoc_insertion_point(field_set:MyoFPGAProtobuf.MotorConfig.spPosMax)
}
inline void MotorConfig::add_spposmax(::google::protobuf::int32 value) {
  spposmax_.Add(value);
  // @@protoc_insertion_point(field_add:MyoFPGAProtobuf.MotorConfig.spPosMax)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MotorConfig::spposmax() const {
  // @@protoc_insertion_point(field_list:MyoFPGAProtobuf.MotorConfig.spPosMax)
  return spposmax_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MotorConfig::mutable_spposmax() {
  // @@protoc_insertion_point(field_mutable_list:MyoFPGAProtobuf.MotorConfig.spPosMax)
  return &spposmax_;
}

// repeated int32 spNegMax = 5;
inline int MotorConfig::spnegmax_size() const {
  return spnegmax_.size();
}
inline void MotorConfig::clear_spnegmax() {
  spnegmax_.Clear();
}
inline ::google::protobuf::int32 MotorConfig::spnegmax(int index) const {
  // @@protoc_insertion_point(field_get:MyoFPGAProtobuf.MotorConfig.spNegMax)
  return spnegmax_.Get(index);
}
inline void MotorConfig::set_spnegmax(int index, ::google::protobuf::int32 value) {
  spnegmax_.Set(index, value);
  // @@protoc_insertion_point(field_set:MyoFPGAProtobuf.MotorConfig.spNegMax)
}
inline void MotorConfig::add_spnegmax(::google::protobuf::int32 value) {
  spnegmax_.Add(value);
  // @@protoc_insertion_point(field_add:MyoFPGAProtobuf.MotorConfig.spNegMax)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MotorConfig::spnegmax() const {
  // @@protoc_insertion_point(field_list:MyoFPGAProtobuf.MotorConfig.spNegMax)
  return spnegmax_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MotorConfig::mutable_spnegmax() {
  // @@protoc_insertion_point(field_mutable_list:MyoFPGAProtobuf.MotorConfig.spNegMax)
  return &spnegmax_;
}

// repeated uint32 Kp = 6;
inline int MotorConfig::kp_size() const {
  return kp_.size();
}
inline void MotorConfig::clear_kp() {
  kp_.Clear();
}
inline ::google::protobuf::uint32 MotorConfig::kp(int index) const {
  // @@protoc_insertion_point(field_get:MyoFPGAProtobuf.MotorConfig.Kp)
  return kp_.Get(index);
}
inline void MotorConfig::set_kp(int index, ::google::protobuf::uint32 value) {
  kp_.Set(index, value);
  // @@protoc_insertion_point(field_set:MyoFPGAProtobuf.MotorConfig.Kp)
}
inline void MotorConfig::add_kp(::google::protobuf::uint32 value) {
  kp_.Add(value);
  // @@protoc_insertion_point(field_add:MyoFPGAProtobuf.MotorConfig.Kp)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MotorConfig::kp() const {
  // @@protoc_insertion_point(field_list:MyoFPGAProtobuf.MotorConfig.Kp)
  return kp_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MotorConfig::mutable_kp() {
  // @@protoc_insertion_point(field_mutable_list:MyoFPGAProtobuf.MotorConfig.Kp)
  return &kp_;
}

// repeated uint32 Ki = 7;
inline int MotorConfig::ki_size() const {
  return ki_.size();
}
inline void MotorConfig::clear_ki() {
  ki_.Clear();
}
inline ::google::protobuf::uint32 MotorConfig::ki(int index) const {
  // @@protoc_insertion_point(field_get:MyoFPGAProtobuf.MotorConfig.Ki)
  return ki_.Get(index);
}
inline void MotorConfig::set_ki(int index, ::google::protobuf::uint32 value) {
  ki_.Set(index, value);
  // @@protoc_insertion_point(field_set:MyoFPGAProtobuf.MotorConfig.Ki)
}
inline void MotorConfig::add_ki(::google::protobuf::uint32 value) {
  ki_.Add(value);
  // @@protoc_insertion_point(field_add:MyoFPGAProtobuf.MotorConfig.Ki)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MotorConfig::ki() const {
  // @@protoc_insertion_point(field_list:MyoFPGAProtobuf.MotorConfig.Ki)
  return ki_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MotorConfig::mutable_ki() {
  // @@protoc_insertion_point(field_mutable_list:MyoFPGAProtobuf.MotorConfig.Ki)
  return &ki_;
}

// repeated uint32 Kd = 8;
inline int MotorConfig::kd_size() const {
  return kd_.size();
}
inline void MotorConfig::clear_kd() {
  kd_.Clear();
}
inline ::google::protobuf::uint32 MotorConfig::kd(int index) const {
  // @@protoc_insertion_point(field_get:MyoFPGAProtobuf.MotorConfig.Kd)
  return kd_.Get(index);
}
inline void MotorConfig::set_kd(int index, ::google::protobuf::uint32 value) {
  kd_.Set(index, value);
  // @@protoc_insertion_point(field_set:MyoFPGAProtobuf.MotorConfig.Kd)
}
inline void MotorConfig::add_kd(::google::protobuf::uint32 value) {
  kd_.Add(value);
  // @@protoc_insertion_point(field_add:MyoFPGAProtobuf.MotorConfig.Kd)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MotorConfig::kd() const {
  // @@protoc_insertion_point(field_list:MyoFPGAProtobuf.MotorConfig.Kd)
  return kd_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MotorConfig::mutable_kd() {
  // @@protoc_insertion_point(field_mutable_list:MyoFPGAProtobuf.MotorConfig.Kd)
  return &kd_;
}

// repeated uint32 forwardGain = 9;
inline int MotorConfig::forwardgain_size() const {
  return forwardgain_.size();
}
inline void MotorConfig::clear_forwardgain() {
  forwardgain_.Clear();
}
inline ::google::protobuf::uint32 MotorConfig::forwardgain(int index) const {
  // @@protoc_insertion_point(field_get:MyoFPGAProtobuf.MotorConfig.forwardGain)
  return forwardgain_.Get(index);
}
inline void MotorConfig::set_forwardgain(int index, ::google::protobuf::uint32 value) {
  forwardgain_.Set(index, value);
  // @@protoc_insertion_point(field_set:MyoFPGAProtobuf.MotorConfig.forwardGain)
}
inline void MotorConfig::add_forwardgain(::google::protobuf::uint32 value) {
  forwardgain_.Add(value);
  // @@protoc_insertion_point(field_add:MyoFPGAProtobuf.MotorConfig.forwardGain)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MotorConfig::forwardgain() const {
  // @@protoc_insertion_point(field_list:MyoFPGAProtobuf.MotorConfig.forwardGain)
  return forwardgain_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MotorConfig::mutable_forwardgain() {
  // @@protoc_insertion_point(field_mutable_list:MyoFPGAProtobuf.MotorConfig.forwardGain)
  return &forwardgain_;
}

// repeated uint32 deadBand = 10;
inline int MotorConfig::deadband_size() const {
  return deadband_.size();
}
inline void MotorConfig::clear_deadband() {
  deadband_.Clear();
}
inline ::google::protobuf::uint32 MotorConfig::deadband(int index) const {
  // @@protoc_insertion_point(field_get:MyoFPGAProtobuf.MotorConfig.deadBand)
  return deadband_.Get(index);
}
inline void MotorConfig::set_deadband(int index, ::google::protobuf::uint32 value) {
  deadband_.Set(index, value);
  // @@protoc_insertion_point(field_set:MyoFPGAProtobuf.MotorConfig.deadBand)
}
inline void MotorConfig::add_deadband(::google::protobuf::uint32 value) {
  deadband_.Add(value);
  // @@protoc_insertion_point(field_add:MyoFPGAProtobuf.MotorConfig.deadBand)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MotorConfig::deadband() const {
  // @@protoc_insertion_point(field_list:MyoFPGAProtobuf.MotorConfig.deadBand)
  return deadband_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MotorConfig::mutable_deadband() {
  // @@protoc_insertion_point(field_mutable_list:MyoFPGAProtobuf.MotorConfig.deadBand)
  return &deadband_;
}

// repeated int32 IntegralPosMax = 11;
inline int MotorConfig::integralposmax_size() const {
  return integralposmax_.size();
}
inline void MotorConfig::clear_integralposmax() {
  integralposmax_.Clear();
}
inline ::google::protobuf::int32 MotorConfig::integralposmax(int index) const {
  // @@protoc_insertion_point(field_get:MyoFPGAProtobuf.MotorConfig.IntegralPosMax)
  return integralposmax_.Get(index);
}
inline void MotorConfig::set_integralposmax(int index, ::google::protobuf::int32 value) {
  integralposmax_.Set(index, value);
  // @@protoc_insertion_point(field_set:MyoFPGAProtobuf.MotorConfig.IntegralPosMax)
}
inline void MotorConfig::add_integralposmax(::google::protobuf::int32 value) {
  integralposmax_.Add(value);
  // @@protoc_insertion_point(field_add:MyoFPGAProtobuf.MotorConfig.IntegralPosMax)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MotorConfig::integralposmax() const {
  // @@protoc_insertion_point(field_list:MyoFPGAProtobuf.MotorConfig.IntegralPosMax)
  return integralposmax_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MotorConfig::mutable_integralposmax() {
  // @@protoc_insertion_point(field_mutable_list:MyoFPGAProtobuf.MotorConfig.IntegralPosMax)
  return &integralposmax_;
}

// repeated int32 IntegralNegMax = 12;
inline int MotorConfig::integralnegmax_size() const {
  return integralnegmax_.size();
}
inline void MotorConfig::clear_integralnegmax() {
  integralnegmax_.Clear();
}
inline ::google::protobuf::int32 MotorConfig::integralnegmax(int index) const {
  // @@protoc_insertion_point(field_get:MyoFPGAProtobuf.MotorConfig.IntegralNegMax)
  return integralnegmax_.Get(index);
}
inline void MotorConfig::set_integralnegmax(int index, ::google::protobuf::int32 value) {
  integralnegmax_.Set(index, value);
  // @@protoc_insertion_point(field_set:MyoFPGAProtobuf.MotorConfig.IntegralNegMax)
}
inline void MotorConfig::add_integralnegmax(::google::protobuf::int32 value) {
  integralnegmax_.Add(value);
  // @@protoc_insertion_point(field_add:MyoFPGAProtobuf.MotorConfig.IntegralNegMax)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MotorConfig::integralnegmax() const {
  // @@protoc_insertion_point(field_list:MyoFPGAProtobuf.MotorConfig.IntegralNegMax)
  return integralnegmax_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MotorConfig::mutable_integralnegmax() {
  // @@protoc_insertion_point(field_mutable_list:MyoFPGAProtobuf.MotorConfig.IntegralNegMax)
  return &integralnegmax_;
}

// -------------------------------------------------------------------

// MotorStatus

// repeated int32 pwmRef = 1;
inline int MotorStatus::pwmref_size() const {
  return pwmref_.size();
}
inline void MotorStatus::clear_pwmref() {
  pwmref_.Clear();
}
inline ::google::protobuf::int32 MotorStatus::pwmref(int index) const {
  // @@protoc_insertion_point(field_get:MyoFPGAProtobuf.MotorStatus.pwmRef)
  return pwmref_.Get(index);
}
inline void MotorStatus::set_pwmref(int index, ::google::protobuf::int32 value) {
  pwmref_.Set(index, value);
  // @@protoc_insertion_point(field_set:MyoFPGAProtobuf.MotorStatus.pwmRef)
}
inline void MotorStatus::add_pwmref(::google::protobuf::int32 value) {
  pwmref_.Add(value);
  // @@protoc_insertion_point(field_add:MyoFPGAProtobuf.MotorStatus.pwmRef)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MotorStatus::pwmref() const {
  // @@protoc_insertion_point(field_list:MyoFPGAProtobuf.MotorStatus.pwmRef)
  return pwmref_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MotorStatus::mutable_pwmref() {
  // @@protoc_insertion_point(field_mutable_list:MyoFPGAProtobuf.MotorStatus.pwmRef)
  return &pwmref_;
}

// repeated int32 position = 2;
inline int MotorStatus::position_size() const {
  return position_.size();
}
inline void MotorStatus::clear_position() {
  position_.Clear();
}
inline ::google::protobuf::int32 MotorStatus::position(int index) const {
  // @@protoc_insertion_point(field_get:MyoFPGAProtobuf.MotorStatus.position)
  return position_.Get(index);
}
inline void MotorStatus::set_position(int index, ::google::protobuf::int32 value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:MyoFPGAProtobuf.MotorStatus.position)
}
inline void MotorStatus::add_position(::google::protobuf::int32 value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:MyoFPGAProtobuf.MotorStatus.position)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MotorStatus::position() const {
  // @@protoc_insertion_point(field_list:MyoFPGAProtobuf.MotorStatus.position)
  return position_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MotorStatus::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:MyoFPGAProtobuf.MotorStatus.position)
  return &position_;
}

// repeated int32 velocity = 3;
inline int MotorStatus::velocity_size() const {
  return velocity_.size();
}
inline void MotorStatus::clear_velocity() {
  velocity_.Clear();
}
inline ::google::protobuf::int32 MotorStatus::velocity(int index) const {
  // @@protoc_insertion_point(field_get:MyoFPGAProtobuf.MotorStatus.velocity)
  return velocity_.Get(index);
}
inline void MotorStatus::set_velocity(int index, ::google::protobuf::int32 value) {
  velocity_.Set(index, value);
  // @@protoc_insertion_point(field_set:MyoFPGAProtobuf.MotorStatus.velocity)
}
inline void MotorStatus::add_velocity(::google::protobuf::int32 value) {
  velocity_.Add(value);
  // @@protoc_insertion_point(field_add:MyoFPGAProtobuf.MotorStatus.velocity)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MotorStatus::velocity() const {
  // @@protoc_insertion_point(field_list:MyoFPGAProtobuf.MotorStatus.velocity)
  return velocity_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MotorStatus::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable_list:MyoFPGAProtobuf.MotorStatus.velocity)
  return &velocity_;
}

// repeated int32 displacement = 4;
inline int MotorStatus::displacement_size() const {
  return displacement_.size();
}
inline void MotorStatus::clear_displacement() {
  displacement_.Clear();
}
inline ::google::protobuf::int32 MotorStatus::displacement(int index) const {
  // @@protoc_insertion_point(field_get:MyoFPGAProtobuf.MotorStatus.displacement)
  return displacement_.Get(index);
}
inline void MotorStatus::set_displacement(int index, ::google::protobuf::int32 value) {
  displacement_.Set(index, value);
  // @@protoc_insertion_point(field_set:MyoFPGAProtobuf.MotorStatus.displacement)
}
inline void MotorStatus::add_displacement(::google::protobuf::int32 value) {
  displacement_.Add(value);
  // @@protoc_insertion_point(field_add:MyoFPGAProtobuf.MotorStatus.displacement)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MotorStatus::displacement() const {
  // @@protoc_insertion_point(field_list:MyoFPGAProtobuf.MotorStatus.displacement)
  return displacement_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MotorStatus::mutable_displacement() {
  // @@protoc_insertion_point(field_mutable_list:MyoFPGAProtobuf.MotorStatus.displacement)
  return &displacement_;
}

// repeated int32 current = 5;
inline int MotorStatus::current_size() const {
  return current_.size();
}
inline void MotorStatus::clear_current() {
  current_.Clear();
}
inline ::google::protobuf::int32 MotorStatus::current(int index) const {
  // @@protoc_insertion_point(field_get:MyoFPGAProtobuf.MotorStatus.current)
  return current_.Get(index);
}
inline void MotorStatus::set_current(int index, ::google::protobuf::int32 value) {
  current_.Set(index, value);
  // @@protoc_insertion_point(field_set:MyoFPGAProtobuf.MotorStatus.current)
}
inline void MotorStatus::add_current(::google::protobuf::int32 value) {
  current_.Add(value);
  // @@protoc_insertion_point(field_add:MyoFPGAProtobuf.MotorStatus.current)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MotorStatus::current() const {
  // @@protoc_insertion_point(field_list:MyoFPGAProtobuf.MotorStatus.current)
  return current_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MotorStatus::mutable_current() {
  // @@protoc_insertion_point(field_mutable_list:MyoFPGAProtobuf.MotorStatus.current)
  return &current_;
}

// repeated int32 sensor = 6;
inline int MotorStatus::sensor_size() const {
  return sensor_.size();
}
inline void MotorStatus::clear_sensor() {
  sensor_.Clear();
}
inline ::google::protobuf::int32 MotorStatus::sensor(int index) const {
  // @@protoc_insertion_point(field_get:MyoFPGAProtobuf.MotorStatus.sensor)
  return sensor_.Get(index);
}
inline void MotorStatus::set_sensor(int index, ::google::protobuf::int32 value) {
  sensor_.Set(index, value);
  // @@protoc_insertion_point(field_set:MyoFPGAProtobuf.MotorStatus.sensor)
}
inline void MotorStatus::add_sensor(::google::protobuf::int32 value) {
  sensor_.Add(value);
  // @@protoc_insertion_point(field_add:MyoFPGAProtobuf.MotorStatus.sensor)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MotorStatus::sensor() const {
  // @@protoc_insertion_point(field_list:MyoFPGAProtobuf.MotorStatus.sensor)
  return sensor_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MotorStatus::mutable_sensor() {
  // @@protoc_insertion_point(field_mutable_list:MyoFPGAProtobuf.MotorStatus.sensor)
  return &sensor_;
}

// -------------------------------------------------------------------

// MotorCommand

// repeated uint32 motor = 1;
inline int MotorCommand::motor_size() const {
  return motor_.size();
}
inline void MotorCommand::clear_motor() {
  motor_.Clear();
}
inline ::google::protobuf::uint32 MotorCommand::motor(int index) const {
  // @@protoc_insertion_point(field_get:MyoFPGAProtobuf.MotorCommand.motor)
  return motor_.Get(index);
}
inline void MotorCommand::set_motor(int index, ::google::protobuf::uint32 value) {
  motor_.Set(index, value);
  // @@protoc_insertion_point(field_set:MyoFPGAProtobuf.MotorCommand.motor)
}
inline void MotorCommand::add_motor(::google::protobuf::uint32 value) {
  motor_.Add(value);
  // @@protoc_insertion_point(field_add:MyoFPGAProtobuf.MotorCommand.motor)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MotorCommand::motor() const {
  // @@protoc_insertion_point(field_list:MyoFPGAProtobuf.MotorCommand.motor)
  return motor_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MotorCommand::mutable_motor() {
  // @@protoc_insertion_point(field_mutable_list:MyoFPGAProtobuf.MotorCommand.motor)
  return &motor_;
}

// repeated int32 setPoint = 2;
inline int MotorCommand::setpoint_size() const {
  return setpoint_.size();
}
inline void MotorCommand::clear_setpoint() {
  setpoint_.Clear();
}
inline ::google::protobuf::int32 MotorCommand::setpoint(int index) const {
  // @@protoc_insertion_point(field_get:MyoFPGAProtobuf.MotorCommand.setPoint)
  return setpoint_.Get(index);
}
inline void MotorCommand::set_setpoint(int index, ::google::protobuf::int32 value) {
  setpoint_.Set(index, value);
  // @@protoc_insertion_point(field_set:MyoFPGAProtobuf.MotorCommand.setPoint)
}
inline void MotorCommand::add_setpoint(::google::protobuf::int32 value) {
  setpoint_.Add(value);
  // @@protoc_insertion_point(field_add:MyoFPGAProtobuf.MotorCommand.setPoint)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MotorCommand::setpoint() const {
  // @@protoc_insertion_point(field_list:MyoFPGAProtobuf.MotorCommand.setPoint)
  return setpoint_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MotorCommand::mutable_setpoint() {
  // @@protoc_insertion_point(field_mutable_list:MyoFPGAProtobuf.MotorCommand.setPoint)
  return &setpoint_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MyoFPGAProtobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_myoFPGA_2eproto__INCLUDED
