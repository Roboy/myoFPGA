// File: pid_controller.v
// Generated by MyHDL 0.9.0
// Date: Wed Mar  1 21:55:12 2017


`timescale 1ns/10ps

module pid_controller (
    clock,
    reset,
    Kp,
    Kd,
    Ki,
    sp,
    pv,
    output,
    forwardGain,
    outputPosMax,
    outputNegMax,
    timePeriod,
    IntegralNegMax,
    IntegralPosMax,
    deadBand
);


input [0:0] clock;
input reset;
input signed [31:0] Kp;
input signed [31:0] Kd;
input signed [31:0] Ki;
input signed [31:0] sp;
input signed [31:0] pv;
output signed [31:0] output;
reg signed [31:0] output;
input signed [31:0] forwardGain;
input signed [31:0] outputPosMax;
input signed [31:0] outputNegMax;
input signed [31:0] timePeriod;
input signed [31:0] IntegralNegMax;
input signed [31:0] IntegralPosMax;
input signed [31:0] deadBand;

reg signed [31:0] integral;
reg signed [31:0] result;
reg signed [31:0] pterm;
reg signed [31:0] ffterm;
reg signed [31:0] err;
reg signed [31:0] dterm;
reg signed [31:0] lastError;





always @(posedge clock, negedge reset) begin: PID_CONTROLLER_PID_CONTROLLERLOGIC
    if (reset == 0) begin
        ffterm <= 0;
        err <= 0;
        integral <= 0;
        pterm <= 0;
        result <= 0;
        dterm <= 0;
        output <= 0;
        lastError <= 0;
    end
    else begin
        err <= (sp - pv);
        if (((err > deadBand) || (err < ((-1) * deadBand)))) begin
            pterm <= (Kp * err);
            if (((pterm < outputPosMax) || (pterm > outputNegMax))) begin
                integral <= (integral + ((Ki * err) * timePeriod));
                if ((integral > IntegralPosMax)) begin
                    integral <= IntegralPosMax;
                end
                else if ((integral < IntegralNegMax)) begin
                    integral <= IntegralNegMax;
                end
            end
            dterm <= ((err - lastError) * Kd);
            ffterm <= (forwardGain * sp);
            result <= (((ffterm + pterm) + integral) + dterm);
            if ((result < outputNegMax)) begin
                result <= outputNegMax;
            end
            else if ((result > outputPosMax)) begin
                result <= outputPosMax;
            end
        end
        else begin
            result <= integral;
        end
        lastError <= err;
        if ((result > 4000)) begin
            result <= 4000;
        end
        else if ((result < (-4000))) begin
            result <= (-4000);
        end
        output <= result;
    end
end

endmodule
